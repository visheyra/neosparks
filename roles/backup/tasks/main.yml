---

- name: "[Preflight] Backup directory"
  file:
    path: "{{ allspark_backup_directory }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0740
  become: true

- name: "[Preflight] Ensuring operation is defined"
  fail:
    msg: "Backup role called without ansible_operation variabl set. Exiting."
  when: allspark_operation is undefined
  changed_when: false

- name: "[Restore] - Extract full backup"
  unarchive:
    src: "{{ allspark_root_directory }}/backup/full.{{ allspark_backup_format }}"
    dest: "{{ allspark_root_directory }}"
    remote_src: true
  when: "allspark_operation == 'restore'"
  become: true

- name: "[Restore] Load containers list"
  shell: >-
    {% if allspark_operation == 'restore' -%}
      cat {{ allspark_backup_directory }}/saved_containers.txt
    {%- elif allspark_operation == 'backup' -%}
      docker ps -q --filter label=heritage=allspark | xargs -n 1 docker inspect --format '{{ '{{' }} .Name {{ '}}' }}' | tr -d '/'
    {%- endif -%}
  register: containers_list
  changed_when: false

- name: "[Backup] Containers list export"
  copy:
    content: "{{ containers_list.stdout }}"
    dest: "{{ allspark_backup_directory }}/saved_containers.txt"
  when: "allspark_operation == 'backup'"

- name: "[Restore] Load volume list"
  shell: >-
    {% if allspark_operation == 'restore' -%}
      cat {{ allspark_backup_directory }}/saved_volumes.txt
    {%- elif allspark_operation == 'backup' -%}
      docker volume ls --format '{{ '{{' }} .Name {{ '}}' }}' | tr -d '/'
    {%- endif -%}
  register: volumes_list
  changed_when: false

- name: "[Backup] Volume list export"
  copy:
    content: "{{ volumes_list.stdout }}"
    dest: "{{ allspark_backup_directory }}/saved_volumes.txt"
  when: "allspark_operation == 'backup'"

- name: "[Backup] Verify Docker volumes"
  docker_volume:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ containers_list.stdout_lines }}"

- name: "[Backup] perform operation"
  docker_container:
    name: backup
    image: "{{ downloads.volumerize.image }}:{{ downloads.volumerize.tag }}"
    volumes: >-
      [
      {% for volume in volumes_list.stdout_lines %}
      "{{ volume }}:/source/{{ volume }}{% if allspark_operation == 'backup' %}:ro{% endif %}",
      {% endfor %}
      "/var/run/docker.sock:/var/run/docker.sock",
      "{{ allspark_backup_directory }}:/backup",
      ]
    env:
      VOLUMERIZE_SOURCE: '/source'
      VOLUMERIZE_TARGET: 'file:///backup'
      VOLUMERIZE_CONTAINERS: "{% if allspark_operation == 'backup' %}{{ containers_list.stdout }}{% endif %}"
    restart_policy: no
    command: >-
        {% if allspark_operation == 'restore' %}
          restore
          {% if allspark_restore_dry_run %}
          --dry-run
          {% endif %}
        {% elif allspark_operation == 'backup'%}
          backup
        {% endif %}
    detach: no

- name: "[Backup] Archive backup"
  archive:
    path:
    - "{{ allspark_root_directory }}/*"
    - "{{ allspark_backup_directory }}"
    exclude_path:
    - "{{ allspark_backup_directory }}/full.{{ allspark_backup_format }}"
    dest: "{{ allspark_backup_directory }}/full.{{ allspark_backup_format }}"
  become: true
  when: "allspark_operation == 'backup'"
