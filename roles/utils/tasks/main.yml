- name: Docker volumes creation
  docker_volume:
    name: "allspark_portainer_data"

- name: Generate portainer password
  copy:
    src: "{{ allspark_root_directory }}/data/secrets/admin_password.txt"
    dest: "{{ allspark_root_directory }}/data/secrets/portainer_password.txt"
    remote_src: yes

- name: Setup Portainer as infra service
  docker_container:
    name: portainer
    image: "{{ downloads.portainer.image }}:{{ downloads.portainer.tag }}"
    state: "{{ allspark_portainer.enabled and 'started' or 'absent'}}"
    volumes:
      - "allspark_portainer_data:/data"
      - "{{ allspark_root_directory }}/data/secrets/portainer_password.txt:/data/secrets/portainer-pass"
      - "/var/run/docker.sock:/var/run/docker.sock"
    command: "--admin-password-file /data/secrets/portainer-pass --no-analytics --host unix:///var/run/docker.sock"
    purge_networks: true
    networks:
      - name: allspark
    labels:
      "heritage": "allspark"
    restart_policy: always

- name: Docker volumes creation
  docker_volume:
    name: "allspark_{{ item }}"
  with_items:
    - rocketchat_data
    - rocketchat_avatars
  when: allspark_rocketchat.enabled

- name: Setup MongoDB chat service database
  docker_container:
    name: rocketchat_database
    image: "{{ downloads.rocketchat_mongodb.image }}:{{ downloads.rocketchat_mongodb.tag }}"
    state: "{{ allspark_rocketchat.enabled and 'started' or 'absent'}}"
    purge_networks: true
    networks:
      - name: allspark
    volumes:
      - "allspark_rocketchat_data:/data/db"
    labels:
      "heritage": "allspark"
    restart_policy: always

- name: Setup RocketChat service
  docker_container:
    name: rocketchat
    image: "{{ downloads.rocketchat.image }}:{{ downloads.rocketchat.tag }}"
    state: "{{ allspark_rocketchat.enabled and 'started' or 'absent'}}"
    env:
      MONGO_URL: mongodb://rocketchat_database/rocketchat
      ROOT_URL: "http://chat.{{ allspark_root_domain }}"
    volumes:
      - "allspark_rocketchat_avatars:/app/uploads"
    purge_networks: true
    networks:
      - name: allspark
    labels:
      "heritage": "allspark"
    restart_policy: always

- name: Test admin mattermost db password existence
  stat: path="{{ allspark_root_directory}}/data/secrets/admin_password_mattermostdb.txt"
  register: admin_password_mattermost_file

- name: Generate random admin mattermost db password
  shell: "echo -n $(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c26) > {{ allspark_root_directory}}/data/secrets/admin_password_mattermostdb.txt"
  when: not admin_password_mattermost_file.stat.exists
  tags:
  - skip_ansible_lint

- name: Register mattermost admin password
  shell: "cat {{ allspark_root_directory}}/data/secrets/admin_password_mattermostdb.txt"
  register: allspark_admin_password_mattermostdb
  changed_when: false
  tags:
  - skip_ansible_lint

- name: Test [AtRestEncryptKey] existence
  stat: path="{{ allspark_root_directory}}/data/secrets/AtRestEncryptKey.txt"
  register: AtRestEncryptKey_file

- name: Generate random [AtRestEncryptKey]
  shell: "echo -n $(< date +%s | sha256sum | base64 | head -c 32) > {{ allspark_root_directory}}/data/secrets/AtRestEncryptKey.txt"
  when: not AtRestEncryptKey_file.stat.exists
  tags:
  - skip_ansible_lint

- name: Register random [AtRestEncryptKey]
  shell: "cat {{ allspark_root_directory}}/data/secrets/AtRestEncryptKey.txt"
  register: allspark_AtRestEncryptKey
  changed_when: false
  tags:
  - skip_ansible_lint

- name: Test [PublicLinkSalt] existence
  stat: path="{{ allspark_root_directory}}/data/secrets/PublicLinkSalt.txt"
  register: PublicLinkSalt_file
  tags:
  - skip_ansible_lint

- name: Generate random [PublicLinkSalt]
  shell: "echo -n $(< date +%s | sha256sum | base64 | head -c 32) > {{ allspark_root_directory}}/data/secrets/PublicLinkSalt.txt"
  when: not PublicLinkSalt_file.stat.exists
  tags:
  - skip_ansible_lint

- name: Register random [PublicLinkSalt]
  shell: "cat {{ allspark_root_directory}}/data/secrets/PublicLinkSalt.txt"
  register: allspark_PublicLinkSalt
  changed_when: false
  tags:
  - skip_ansible_lint

- name: Test [InviteSalt] existence
  stat: path="{{ allspark_root_directory}}/data/secrets/InviteSalt.txt"
  register: InviteSalt_file

- name: Generate random [InviteSalt]
  shell: "echo -n $(< date +%s | sha256sum | base64 | head -c 32) > {{ allspark_root_directory}}/data/secrets/InviteSalt.txt"
  when: not InviteSalt_file.stat.exists
  tags:
  - skip_ansible_lint

- name: Register random [InviteSalt]
  shell: "cat {{ allspark_root_directory}}/data/secrets/InviteSalt.txt"
  register: allspark_InviteSalt
  changed_when: false
  tags:
  - skip_ansible_lint

- name: MatterMost config directory
  file:
    state: directory
    path: "{{ allspark_root_directory }}/config/mattermost"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: MatterMost database network
  docker_network:
    name: allspark_mattermost_database

- name: Generate Mattermost config
  template:
    src: templates/config.json.j2
    dest: "{{ allspark_root_directory }}/config/mattermost/config_i.json"
  register: mattermost_template
  when: allspark_mattermost.enabled

## Mattermost change the contents of it's configuration file at runtime
## To avoid indepotency break using only the template module on this file,
## we first copy it to config_i.json and then override runtime config
## only if this task changed.
- name: Copy Mattermost runtime configuration
  copy:
    remote_src: yes
    src: "{{ allspark_root_directory }}/config/mattermost/config_i.json"
    dest: "{{ allspark_root_directory }}/config/mattermost/config.json"
    owner: 2000
    group: 2000
  become: true
  when: mattermost_template is changed

- name: Docker volumes creation
  docker_volume:
    name: "allspark_{{ item }}"
  with_items:
    - mattermost_data
    - mattermost_logs
    - mattermost_config
    - mattermost_postgres_data
  when: allspark_mattermost.enabled

- name: Setup PostgreSQL chat service database
  docker_container:
    name: mattermost_database
    image: "{{ downloads.mattermost_postgresql.image }}:{{ downloads.mattermost_postgresql.tag }}"
    state: "{{ allspark_mattermost.enabled and 'started' or 'absent'}}"
    env:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "{{ allspark_admin_password_mattermostdb.stdout }}"
      POSTGRES_DB: "mattermostdb"
      POSTGRES_INITDB_ARGS: "--data-checksums"
    purge_networks: true
    user: postgres
    networks:
      - name: allspark_mattermost_database
    volumes:
      - "allspark_mattermost_postgres_data:/var/lib/postgresql/data"
    restart_policy: always
    labels:
      "heritage": "allspark"

- name: Setup MatterMost service
  docker_container:
    name: mattermost
    image: "{{ downloads.mattermost.image }}:{{ downloads.mattermost.tag }}"
    state: "{{ allspark_mattermost.enabled and 'started' or 'absent'}}"
    env:
      MM_USERNAME: "postgres"
      MM_PASSWORD: "{{ allspark_admin_password_mattermostdb.stdout }}"
      MM_DBNAME: "mattermostdb"
      DB_HOST: "mattermost_database"
    volumes:
      - "allspark_mattermost_data:/mattermost/data"
      - "allspark_mattermost_logs:/mattermost/logs"
      - "allspark_mattermost_config:/mattermost/config"
      - "{{ allspark_root_directory }}/config/mattermost/config.json:/mattermost/config/config.json"
    purge_networks: true
    networks:
      - name: allspark
      - name: allspark_mattermost_database
    labels:
      "heritage": "allspark"
    restart_policy: always
